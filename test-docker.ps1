# Script de prueba para Docker en Windows PowerShell
# Crypto Data Fetcher - Docker Test

param(
    [string]$Command = "help"
)

# Colores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-Host "Crypto Data Fetcher - Docker Test Script" -ForegroundColor $Blue
    Write-Host ""
    Write-Host "Uso: .\test-docker.ps1 [COMANDO]"
    Write-Host ""
    Write-Host "Comandos disponibles:"
    Write-Host "  check     - Verificar instalaci√≥n de Docker"
    Write-Host "  build     - Construir imagen Docker"
    Write-Host "  test      - Ejecutar prueba r√°pida"
    Write-Host "  dev       - Iniciar modo desarrollo"
    Write-Host "  logs      - Ver logs"
    Write-Host "  stop      - Detener contenedor"
    Write-Host "  clean     - Limpiar contenedores"
    Write-Host "  help      - Mostrar esta ayuda"
    Write-Host ""
    Write-Host "Ejemplos:"
    Write-Host "  .\test-docker.ps1 check"
    Write-Host "  .\test-docker.ps1 build"
    Write-Host "  .\test-docker.ps1 test"
}

# Funci√≥n para verificar Docker
function Test-DockerInstallation {
    Write-Host "üîç Verificando instalaci√≥n de Docker..." -ForegroundColor $Blue
    
    try {
        $dockerVersion = docker --version 2>$null
        if ($dockerVersion) {
            Write-Host "‚úÖ Docker instalado: $dockerVersion" -ForegroundColor $Green
        } else {
            Write-Host "‚ùå Docker no est√° instalado" -ForegroundColor $Red
            Write-Host "üí° Descarga Docker Desktop desde: https://www.docker.com/products/docker-desktop" -ForegroundColor $Yellow
            return $false
        }
    } catch {
        Write-Host "‚ùå Error al verificar Docker" -ForegroundColor $Red
        return $false
    }
    
    try {
        $composeVersion = docker-compose --version 2>$null
        if ($composeVersion) {
            Write-Host "‚úÖ Docker Compose instalado: $composeVersion" -ForegroundColor $Green
        } else {
            Write-Host "‚ùå Docker Compose no est√° instalado" -ForegroundColor $Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error al verificar Docker Compose" -ForegroundColor $Red
        return $false
    }
    
    return $true
}

# Funci√≥n para verificar API key
function Test-ApiKey {
    $apiKey = $env:API_KEY_GECKO
    if (-not $apiKey) {
        Write-Host "‚ö†Ô∏è  API_KEY_GECKO no est√° configurada" -ForegroundColor $Yellow
        Write-Host "üí° Configura la variable de entorno:" -ForegroundColor $Yellow
        Write-Host "   `$env:API_KEY_GECKO = 'tu-api-key-aqui'" -ForegroundColor $Yellow
        return $false
    }
    Write-Host "‚úÖ API Key configurada correctamente" -ForegroundColor $Green
    return $true
}

# Funci√≥n para construir imagen
function Build-DockerImage {
    Write-Host "üî® Construyendo imagen Docker..." -ForegroundColor $Blue
    try {
        docker-compose build
        Write-Host "‚úÖ Imagen construida exitosamente" -ForegroundColor $Green
        return $true
    } catch {
        Write-Host "‚ùå Error al construir imagen" -ForegroundColor $Red
        return $false
    }
}

# Funci√≥n para ejecutar prueba r√°pida
function Test-Container {
    Write-Host "üß™ Ejecutando prueba r√°pida..." -ForegroundColor $Blue
    
    if (-not (Test-ApiKey)) {
        return $false
    }
    
    # Obtener fecha de ayer
    $yesterday = (Get-Date).AddDays(-1).ToString("yyyy-MM-dd")
    
    Write-Host "üìÖ Probando con fecha: $yesterday" -ForegroundColor $Blue
    
    try {
        # Ejecutar contenedor en modo prueba
        docker-compose -f docker-compose.yml -f docker-compose.override.yml run --rm crypto-fetcher python main.py $yesterday --verbose
        
        Write-Host "‚úÖ Prueba completada exitosamente" -ForegroundColor $Green
        return $true
    } catch {
        Write-Host "‚ùå Error en la prueba" -ForegroundColor $Red
        return $false
    }
}

# Funci√≥n para iniciar modo desarrollo
function Start-Development {
    Write-Host "üîß Iniciando modo desarrollo..." -ForegroundColor $Blue
    
    if (-not (Test-ApiKey)) {
        return $false
    }
    
    try {
        docker-compose -f docker-compose.yml -f docker-compose.override.yml up
    } catch {
        Write-Host "‚ùå Error al iniciar modo desarrollo" -ForegroundColor $Red
        return $false
    }
}

# Funci√≥n para ver logs
function Show-Logs {
    Write-Host "üìä Mostrando logs..." -ForegroundColor $Blue
    try {
        docker-compose logs -f
    } catch {
        Write-Host "‚ùå Error al mostrar logs" -ForegroundColor $Red
    }
}

# Funci√≥n para detener contenedor
function Stop-Container {
    Write-Host "üõë Deteniendo contenedor..." -ForegroundColor $Blue
    try {
        docker-compose down
        Write-Host "‚úÖ Contenedor detenido" -ForegroundColor $Green
    } catch {
        Write-Host "‚ùå Error al detener contenedor" -ForegroundColor $Red
    }
}

# Funci√≥n para limpiar
function Clean-Docker {
    Write-Host "üßπ Limpiando contenedores..." -ForegroundColor $Blue
    try {
        docker-compose down --rmi all --volumes --remove-orphans
        Write-Host "‚úÖ Limpieza completada" -ForegroundColor $Green
    } catch {
        Write-Host "‚ùå Error en la limpieza" -ForegroundColor $Red
    }
}

# Procesar comandos
switch ($Command.ToLower()) {
    "check" {
        Test-DockerInstallation
    }
    "build" {
        if (Test-DockerInstallation) {
            Build-DockerImage
        }
    }
    "test" {
        if (Test-DockerInstallation) {
            Test-Container
        }
    }
    "dev" {
        if (Test-DockerInstallation) {
            Start-Development
        }
    }
    "logs" {
        Show-Logs
    }
    "stop" {
        Stop-Container
    }
    "clean" {
        Clean-Docker
    }
    "help" {
        Show-Help
    }
    default {
        Write-Host "‚ùå Comando no v√°lido: $Command" -ForegroundColor $Red
        Show-Help
    }
} 